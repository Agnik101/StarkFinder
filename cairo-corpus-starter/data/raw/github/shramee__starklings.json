{
  "meta": {
    "source": "github",
    "repo": {
      "url": "https://github.com/shramee/starklings",
      "stars": 471,
      "forks": 457,
      "last_commit": "2025-08-05T17:31:23Z",
      "archived": false,
      "full_name": "shramee/starklings"
    }
  },
  "files": [
    {
      "path": "app/client/cypress/fixtures/arrays1.cairo",
      "code": "fn create_array() -> Array<felt252> {\n    let mut a = ArrayTrait::new(); // something to change here...\n    a.append(0);\n    a.append(1);\n    a.append(2);\n    a\n}\n\n\n// Don't change anything in the test\n#[test]\nfn test_array_len() {\n    let mut a = create_array();\n    assert(a.len() == 3, 'Array length is not 3');\n    assert(a.pop_front().unwrap() == 0, 'First element is not 0');\n}",
      "has_tests": true,
      "has_ci": true,
      "has_audit": false
    },
    {
      "path": "app/client/cypress/fixtures/arrays2.cairo",
      "code": "// Don't modify this function\nfn create_array() -> Array<felt252> {\n    let mut a = ArrayTrait::new();\n    a.append(42);\n    a\n}\n\nfn remove_element_from_array(\n    ref a: Array<felt252>\n) { //TODO something to do here...Is there an array method I can use?\n    a.pop_front().unwrap();\n}\n\n#[test]\nfn test_arrays2() {\n    let mut a = create_array();\n    assert(*a.at(0) == 42, 'First element is not 42');\n}\n\n#[test]\nfn test_arrays2_empty() {\n    let mut a = create_array();\n    remove_element_from_array(ref a);\n    assert(a.len() == 0, 'Array length is not 0');\n}",
      "has_tests": true,
      "has_ci": true,
      "has_audit": false
    },
    {
      "path": "app/client/cypress/fixtures/arrays3.cairo",
      "code": "fn create_array() -> Array<felt252> {\n    let mut a = ArrayTrait::new(); // something to change here...\n    a.append(0);\n    a.append(1);\n    a.append(2);\n    a.append(3); // added another argument here so that the test passes\n    a.pop_front().unwrap();\n    a\n}\n\n\n#[test]\nfn test_arrays3() {\n    let mut a = create_array();\n    //TODO modify the method called below to make the test pass.\n    // You should not change the index accessed.\n    a.at(2);\n}",
      "has_tests": true,
      "has_ci": true,
      "has_audit": false
    },
    {
      "path": "app/client/cypress/fixtures/dict1.cairo",
      "code": "fn create_dictionary() -> Felt252Dict<u32> {\n    let mut dict: Felt252Dict<u32> = Default::default();\n    //TODO\n    dict.insert('A', 1);\n    dict.insert('B', 2);\n    dict.insert('bob', 3);\n    return dict;\n}\n\n\n// Don't change anything in the test\n#[test]\n#[available_gas(200000)]\nfn test_dict() {\n    let mut dict = create_dictionary();\n    assert(dict.get('A') == 1, 'First element is not 1');\n    assert(dict.get('B') == 2, 'Second element is not 2');\n    assert(dict.get('bob') == 3, 'Third element is not 3');\n}\n",
      "has_tests": true,
      "has_ci": true,
      "has_audit": false
    },
    {
      "path": "app/client/cypress/fixtures/dict2.cairo",
      "code": "fn multiply_element_by_10(ref dict: Felt252Dict<u32>, n: usize) {\n    //TODO : make a function that multiplies the elements stored at the indexes 0 to n of a dictionary by 10\n    let mut count = 0;\n    loop{\n        if (count == n.into()) {\n            break () ; \n        }\n        let new_value = dict.get(count) * 10;\n        dict.insert(count,new_value);\n        count += 1;\n    }\n}\n\n// Don't change anything in the test\n#[test]\n#[available_gas(2000000000)]\nfn test_3() {\n    let mut dict: Felt252Dict<u32> = Default::default();\n    dict.insert(0, 1);\n    dict.insert(1, 2);\n    dict.insert(2, 3);\n\n    multiply_element_by_10(ref dict, 3);\n\n    assert(dict.get(0) == 10, 'First element is not 10');\n    assert(dict.get(1) == 20, 'Second element is not 20');\n    assert(dict.get(2) == 30, 'Third element is not 30');\n}\n\n#[test]\n#[available_gas(200000000)]\nfn test_4() {\n    let mut dict: Felt252Dict<u32> = Default::default();\n    dict.insert(0, 1);\n    dict.insert(1, 2);\n    dict.insert(2, 5);\n    dict.insert(3, 10);\n\n    multiply_element_by_10(ref dict, 4);\n\n    assert(dict.get(2) == 50, 'First element is not 50');\n    assert(dict.get(3) == 100, 'First element is not 100');\n\n}\n",
      "has_tests": true,
      "has_ci": true,
      "has_audit": false
    }
  ]
}